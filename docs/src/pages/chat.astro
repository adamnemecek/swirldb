---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Chat Demo - SwirlDB Sync">
  <h1>üí¨ Real-time Chat Demo</h1>
  <p>Two independent clients syncing through SwirlDB upstream server. Each client has its own IndexedDB storage.</p>

  <div class="demo-container">
    <div class="iframe-container">
      <div class="iframe-wrapper">
        <h3>Client 1 (Alice)</h3>
        <iframe id="client1" src="/chat-client?id=alice" title="Client 1"></iframe>
      </div>

      <div class="iframe-wrapper">
        <h3>Client 2 (Bob)</h3>
        <iframe id="client2" src="/chat-client?id=bob" title="Client 2"></iframe>
      </div>
    </div>

    <div class="info-panel">
      <h3>üìä Status</h3>
      <div id="status"></div>

      <h3>üîß Controls</h3>
      <button id="clear-btn" class="btn">Clear All Data</button>
      <button id="reconnect-btn" class="btn">Reconnect All</button>

      <h3>‚ÑπÔ∏è Architecture</h3>
      <ul>
        <li><strong>Storage:</strong> IndexedDB (persistent, per-client)</li>
        <li><strong>Sync:</strong> WebSocket binary protocol</li>
        <li><strong>Server:</strong> Pure Rust (swirldb-server)</li>
        <li><strong>WebSocket:</strong> ws://demo.swirldb.org:3030/ws</li>
        <li><strong>HTTP Fallback:</strong> http://demo.swirldb.org:3030/sync/*</li>
        <li><strong>Room:</strong> general</li>
      </ul>

      <h3>üéØ Storage Hints Demo</h3>
      <ul>
        <li><strong>Messages:</strong> Synced to all clients</li>
        <li><strong>Settings:</strong> <code>/user/&#123;id&#125;/prefs</code> - upstream-only</li>
        <li>Each client's preferences are private</li>
        <li>Server backs up settings but doesn't broadcast</li>
      </ul>

      <p class="note">
        üí° Each client maintains its own local database in IndexedDB.
        Messages sync through the upstream server to other clients in real-time.
        User settings are stored in <code>/user/alice/prefs</code> and <code>/user/bob/prefs</code>
        namespaces and only sync upstream (not to other clients).
      </p>
    </div>
  </div>
</Layout>

<style>
  .demo-container {
    display: grid;
    grid-template-columns: 1fr 300px;
    gap: 2rem;
    margin: 2rem 0;
  }

  .iframe-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }

  .iframe-wrapper {
    background: var(--bg-light);
    border-radius: 12px;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .iframe-wrapper h3 {
    margin: 0 0 1rem 0;
    color: var(--primary);
    font-size: 1.1rem;
  }

  iframe {
    border: none;
    border-radius: 8px;
    background: white;
    width: 100%;
    height: 500px;
  }

  .info-panel {
    background: var(--bg-light);
    border-radius: 12px;
    padding: 1.5rem;
    overflow-y: auto;
  }

  .info-panel h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    color: var(--primary);
  }

  .info-panel ul {
    margin: 0;
    padding-left: 1.5rem;
  }

  .info-panel li {
    margin-bottom: 0.5rem;
  }

  #status {
    background: white;
    border: 1px solid var(--border);
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1.5rem;
    font-family: 'Monaco', 'Courier New', monospace;
    font-size: 0.85rem;
  }

  .btn {
    width: 100%;
    margin-bottom: 0.5rem;
  }

  .note {
    background: #fff9e6;
    border-left: 3px solid var(--warning);
    padding: 1rem;
    margin-top: 1.5rem;
    border-radius: 4px;
    font-size: 0.9rem;
  }

  @media (max-width: 1024px) {
    .demo-container {
      grid-template-columns: 1fr;
      height: auto;
    }

    .iframe-container {
      grid-template-columns: 1fr;
      min-height: 600px;
    }
  }
</style>

<script>
  // Monitor iframe status
  const statusEl = document.getElementById('status');

  function updateStatus() {
    if (statusEl) {
      statusEl.innerHTML = `
        <div>‚è∞ ${new Date().toLocaleTimeString()}</div>
        <div>üü¢ Server: ws://demo.swirldb.org:3030</div>
        <div>üë• Clients: 2 active</div>
      `;
    }
  }

  updateStatus();
  setInterval(updateStatus, 1000);

  // Clear all data button
  document.getElementById('clear-btn')?.addEventListener('click', () => {
    const client1 = document.getElementById('client1') as HTMLIFrameElement;
    const client2 = document.getElementById('client2') as HTMLIFrameElement;

    client1?.contentWindow?.location.reload();
    client2?.contentWindow?.location.reload();
  });

  // Reconnect button
  document.getElementById('reconnect-btn')?.addEventListener('click', () => {
    const client1 = document.getElementById('client1') as HTMLIFrameElement;
    const client2 = document.getElementById('client2') as HTMLIFrameElement;

    client1?.contentWindow?.location.reload();
    client2?.contentWindow?.location.reload();
  });
</script>
