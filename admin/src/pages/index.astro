---
// SwirlDB Admin Dashboard - Uses SwirlDB itself for real-time monitoring
// Connects to the '__admin' namespace which the server populates with stats
---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SwirlDB Admin Dashboard</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :root {
      --bg-primary: #0a0e1a;
      --bg-secondary: #13172b;
      --bg-card: #1a1f3a;
      --text-primary: #f1f5f9;
      --text-secondary: #cbd5e1;
      --text-muted: #94a3b8;
      --accent: #8b5cf6;
      --accent-hover: #7c3aed;
      --accent-blue: #3b82f6;
      --gradient-purple: linear-gradient(135deg, #8b5cf6 0%, #6366f1 100%);
      --gradient-blue: linear-gradient(135deg, #3b82f6 0%, #6366f1 100%);
      --success: #10b981;
      --warning: #f59e0b;
      --danger: #ef4444;
      --border: #2d3355;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Inter', sans-serif;
      background: var(--bg-primary);
      color: var(--text-primary);
      min-height: 100vh;
    }

    .app-container {
      display: flex;
      min-height: 100vh;
    }

    /* Sidebar */
    .sidebar {
      width: 260px;
      background: var(--bg-secondary);
      border-right: 1px solid var(--border);
      display: flex;
      flex-direction: column;
    }

    .sidebar-header {
      padding: 1.5rem;
      border-bottom: 1px solid var(--border);
    }

    .sidebar-header h1 {
      font-size: 1.25rem;
      font-weight: 700;
      background: var(--gradient-purple);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .sidebar-header h1 .swirl-icon {
      font-size: 1.75rem;
      background: var(--gradient-purple);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      animation: spin 8s linear infinite;
    }

    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(-360deg); }
    }

    .sidebar-header .subtitle {
      font-size: 0.75rem;
      color: var(--text-muted);
      margin-top: 0.25rem;
    }

    .nav-menu {
      flex: 1;
      padding: 1rem;
    }

    .nav-section {
      margin-bottom: 1.5rem;
    }

    .nav-section-title {
      font-size: 0.7rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      color: var(--text-muted);
      margin-bottom: 0.5rem;
      padding: 0 0.75rem;
    }

    .nav-link {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.75rem;
      border-radius: 0.5rem;
      color: var(--text-secondary);
      text-decoration: none;
      transition: all 0.2s;
      font-size: 0.9rem;
      margin-bottom: 0.25rem;
    }

    .nav-link:hover {
      background: var(--bg-card);
      color: var(--text-primary);
    }

    .nav-link.active {
      background: var(--accent);
      color: white;
    }

    .nav-icon {
      width: 20px;
      height: 20px;
    }

    /* Main Content */
    .main-content {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    .top-bar {
      background: var(--bg-secondary);
      border-bottom: 1px solid var(--border);
      padding: 1rem 1.5rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .server-status {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .status-indicator {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 1rem;
      background: var(--bg-card);
      border-radius: 0.5rem;
      font-size: 0.85rem;
    }

    .status-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    .status-dot.online {
      background: var(--success);
    }

    .status-dot.offline {
      background: var(--danger);
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    .content-area {
      flex: 1;
      overflow-y: auto;
      padding: 1.5rem;
    }

    /* Dashboard Grid */
    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      margin-bottom: 1.5rem;
    }

    .stat-card {
      background: var(--bg-secondary);
      border: 1px solid var(--border);
      border-radius: 0.75rem;
      padding: 1.5rem;
      transition: transform 0.2s;
    }

    .stat-card:hover {
      transform: translateY(-2px);
    }

    .stat-card-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 1rem;
    }

    .stat-card-title {
      font-size: 0.85rem;
      color: var(--text-muted);
      text-transform: uppercase;
      letter-spacing: 0.05em;
      font-weight: 600;
    }

    .stat-card-icon {
      width: 40px;
      height: 40px;
      font-size: 1.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .stat-value {
      font-size: 2.5rem;
      font-weight: 700;
      color: var(--text-primary);
      margin-bottom: 0.5rem;
      font-variant-numeric: tabular-nums;
    }

    .stat-subtitle {
      font-size: 0.85rem;
      color: var(--text-muted);
    }

    /* Section */
    .section {
      background: var(--bg-secondary);
      border: 1px solid var(--border);
      border-radius: 0.75rem;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .section-title {
      font-size: 1.1rem;
      font-weight: 600;
    }

    .btn {
      padding: 0.5rem 1rem;
      background: var(--accent);
      color: white;
      border: none;
      border-radius: 0.5rem;
      font-size: 0.85rem;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s;
      text-decoration: none;
      display: inline-block;
    }

    .btn:hover {
      background: var(--accent-hover);
    }

    .btn-sm {
      padding: 0.35rem 0.75rem;
      font-size: 0.75rem;
    }

    /* Table */
    .table-container {
      overflow-x: auto;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    th {
      text-align: left;
      padding: 0.75rem;
      border-bottom: 2px solid var(--border);
      font-size: 0.85rem;
      font-weight: 600;
      color: var(--text-muted);
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    td {
      padding: 0.75rem;
      border-bottom: 1px solid var(--border);
      font-size: 0.9rem;
    }

    tr:hover {
      background: var(--bg-card);
    }

    .badge {
      display: inline-block;
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-size: 0.75rem;
      font-weight: 600;
    }

    .badge-success {
      background: rgba(16, 185, 129, 0.1);
      color: var(--success);
    }

    .badge-warning {
      background: rgba(245, 158, 11, 0.1);
      color: var(--warning);
    }

    .badge-info {
      background: rgba(59, 130, 246, 0.1);
      color: var(--accent);
    }

    .code {
      font-family: 'SF Mono', Monaco, Consolas, monospace;
      font-size: 0.85rem;
      background: var(--bg-card);
      padding: 0.25rem 0.5rem;
      border-radius: 0.25rem;
      color: var(--accent);
    }

    .empty-state {
      text-align: center;
      padding: 3rem;
      color: var(--text-muted);
    }

    .empty-state-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
      opacity: 0.5;
    }

    .sync-indicator {
      font-size: 0.75rem;
      color: var(--text-muted);
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .sync-pulse {
      width: 6px;
      height: 6px;
      background: var(--success);
      border-radius: 50%;
      animation: pulse 2s infinite;
    }
  </style>
</head>
<body>
  <div class="app-container">
    <!-- Sidebar -->
    <nav class="sidebar">
      <div class="sidebar-header">
        <h1><span class="swirl-icon">üåÄ</span> SwirlDB</h1>
        <div class="subtitle">Administration Console</div>
        <div class="sync-indicator" style="margin-top: 0.75rem;">
          <span class="sync-pulse"></span>
          <span>Real-time sync active</span>
        </div>
      </div>

      <div class="nav-menu">
        <div class="nav-section">
          <div class="nav-section-title">Overview</div>
          <a href="/" class="nav-link active">
            <span class="nav-icon">üìä</span>
            Dashboard
          </a>
        </div>

        <div class="nav-section">
          <div class="nav-section-title">Data Management</div>
          <a href="/namespaces" class="nav-link">
            <span class="nav-icon">üóÇÔ∏è</span>
            Namespaces
          </a>
          <a href="/data" class="nav-link">
            <span class="nav-icon">üîç</span>
            Data Browser
          </a>
        </div>

        <div class="nav-section">
          <div class="nav-section-title">Monitoring</div>
          <a href="/connections" class="nav-link">
            <span class="nav-icon">üîå</span>
            Connections
          </a>
          <a href="/activity" class="nav-link">
            <span class="nav-icon">üìù</span>
            Activity Log
          </a>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <main class="main-content">
      <div class="top-bar">
        <div class="server-status">
          <div class="status-indicator">
            <span class="status-dot online" id="status-dot"></span>
            <span id="status-text">Connected</span>
          </div>
          <div class="status-indicator">
            <span>üåê localhost:3030</span>
          </div>
        </div>
        <div>
          <span id="current-time" style="color: var(--text-muted); font-size: 0.85rem;"></span>
        </div>
      </div>

      <div class="content-area">
        <!-- Stats Grid -->
        <div class="dashboard-grid">
          <div class="stat-card">
            <div class="stat-card-header">
              <div class="stat-card-title">Active Connections</div>
              <div class="stat-card-icon">üîå</div>
            </div>
            <div class="stat-value" id="active-connections">-</div>
            <div class="stat-subtitle">Currently connected clients</div>
          </div>

          <div class="stat-card">
            <div class="stat-card-header">
              <div class="stat-card-title">Namespaces</div>
              <div class="stat-card-icon">üóÇÔ∏è</div>
            </div>
            <div class="stat-value" id="namespace-count">-</div>
            <div class="stat-subtitle">Total namespaces in use</div>
          </div>

          <div class="stat-card">
            <div class="stat-card-header">
              <div class="stat-card-title">CRDT Operations</div>
              <div class="stat-card-icon">üìù</div>
            </div>
            <div class="stat-value" id="total-changes">-</div>
            <div class="stat-subtitle">Sync operations across all namespaces</div>
          </div>

          <div class="stat-card">
            <div class="stat-card-header">
              <div class="stat-card-title">Uptime</div>
              <div class="stat-card-icon">‚è±Ô∏è</div>
            </div>
            <div class="stat-value" id="uptime" style="font-size: 1.8rem;">-</div>
            <div class="stat-subtitle">Server running time</div>
          </div>
        </div>

        <!-- Namespace Overview -->
        <div class="section">
          <div class="section-header">
            <h2 class="section-title">Active Namespaces</h2>
            <a href="/namespaces" class="btn btn-sm">View All</a>
          </div>
          <div class="table-container">
            <table>
              <thead>
                <tr>
                  <th>Namespace ID</th>
                  <th>Connections</th>
                  <th>Changes</th>
                  <th>Last Activity</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="namespaces-tbody">
                <tr>
                  <td colspan="5" class="empty-state">
                    <div class="empty-state-icon">üóÇÔ∏è</div>
                    <div>Loading namespace data...</div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>

        <!-- Active Connections -->
        <div class="section">
          <div class="section-header">
            <h2 class="section-title">Active Connections</h2>
            <a href="/connections" class="btn btn-sm">View All</a>
          </div>
          <div class="table-container">
            <table>
              <thead>
                <tr>
                  <th>Client ID</th>
                  <th>Namespace</th>
                  <th>Transport</th>
                  <th>Connected</th>
                  <th>Last Seen</th>
                </tr>
              </thead>
              <tbody id="connections-tbody">
                <tr>
                  <td colspan="5" class="empty-state">
                    <div class="empty-state-icon">üîå</div>
                    <div>Loading connection data...</div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>

        <!-- Recent Activity -->
        <div class="section">
          <div class="section-header">
            <h2 class="section-title">Recent Activity</h2>
            <span class="sync-indicator">
              <span class="sync-pulse"></span>
              <span>Live updates</span>
            </span>
          </div>
          <div class="table-container">
            <table>
              <thead>
                <tr>
                  <th>Time</th>
                  <th>Event</th>
                  <th>Client</th>
                  <th>Namespace</th>
                  <th>Details</th>
                </tr>
              </thead>
              <tbody id="activity-tbody">
                <tr>
                  <td colspan="5" class="empty-state">
                    <div class="empty-state-icon">üìù</div>
                    <div>Loading activity data...</div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </main>
  </div>

  <script type="module">
    import { SwirlDB } from '/swirldb.js';

    const ADMIN_NAMESPACE = '__admin';

    // Initialize SwirlDB connection to admin namespace
    let db;
    let connected = false;
    let ws = null;
    let reconnectAttempts = 0;
    let maxReconnectDelay = 30000; // Max 30 seconds between reconnection attempts
    let reconnectTimer = null;

    // Update current time
    function updateTime() {
      document.getElementById('current-time').textContent =
        new Date().toLocaleString('en-US', {
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
          hour12: false
        });
    }
    updateTime();
    setInterval(updateTime, 1000);

    // Format uptime
    function formatUptime(seconds) {
      if (!seconds) return '-';
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      const secs = Math.floor(seconds % 60);
      return `${hours}h ${minutes}m ${secs}s`;
    }

    // Format relative time
    function formatRelativeTime(timestamp) {
      if (!timestamp) return 'Never';
      const now = Date.now();
      const diff = now - timestamp;
      const seconds = Math.floor(diff / 1000);

      if (seconds < 60) return `${seconds}s ago`;
      if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;
      if (seconds < 86400) return `${Math.floor(seconds / 3600)}h ago`;
      return new Date(timestamp).toLocaleString();
    }

    async function init() {
      try {
        // Create SwirlDB with localStorage persistence for admin dashboard
        db = await SwirlDB.withLocalStorage('swirldb-admin');
        console.log('‚úÖ Admin dashboard SwirlDB initialized with localStorage');

        // Set up observers for real-time updates
        setupObservers();

        // Render cached data immediately (if any)
        updateStats();
        updateNamespaces();
        updateConnections();
        updateActivity();

        // Connect to server via WebSocket for real-time sync
        await connectToServer();

      } catch (error) {
        console.error('‚ùå Admin dashboard initialization failed:', error);
        document.getElementById('status-dot').className = 'status-dot offline';
        document.getElementById('status-text').textContent = 'Connection Failed';
      }
    }

    async function connectToServer() {
      // Clear any existing reconnect timer
      if (reconnectTimer) {
        clearTimeout(reconnectTimer);
        reconnectTimer = null;
      }

      return new Promise((resolve, reject) => {
        ws = new WebSocket('ws://localhost:3030/ws');
        ws.binaryType = 'arraybuffer';

        ws.onopen = () => {
          console.log('‚úÖ Connected to SwirlDB server');
          connected = true;
          reconnectAttempts = 0; // Reset reconnection counter on successful connection
          document.getElementById('status-dot').className = 'status-dot online';
          document.getElementById('status-text').textContent = 'Connected';

          // Send connect message to __admin namespace
          sendConnectMessage();

          // Request initial sync
          setTimeout(() => {
            console.log('üì§ Requesting initial admin data');
            broadcastCRDTState();
          }, 100);

          resolve();
        };

        ws.onmessage = (event) => {
          handleServerMessage(new Uint8Array(event.data));
        };

        ws.onclose = () => {
          console.log('üëã Disconnected from server');
          connected = false;
          document.getElementById('status-dot').className = 'status-dot offline';
          document.getElementById('status-text').textContent = 'Reconnecting...';

          // Attempt reconnection with exponential backoff
          scheduleReconnect();
        };

        ws.onerror = (error) => {
          console.error('‚ùå WebSocket error:', error);
          reject(error);
        };
      });
    }

    function scheduleReconnect() {
      // Calculate delay with exponential backoff: 1s, 2s, 4s, 8s, 16s, 30s (max)
      const delay = Math.min(1000 * Math.pow(2, reconnectAttempts), maxReconnectDelay);
      reconnectAttempts++;

      console.log(`‚è≥ Reconnecting in ${delay/1000}s (attempt ${reconnectAttempts})...`);
      document.getElementById('status-text').textContent = `Reconnecting in ${Math.ceil(delay/1000)}s...`;

      reconnectTimer = setTimeout(async () => {
        try {
          await connectToServer();
        } catch (error) {
          console.error('‚ùå Reconnection failed:', error);
          // scheduleReconnect will be called again by onclose handler
        }
      }, delay);
    }

    function sendConnectMessage() {
      const clientIdBytes = new TextEncoder().encode('admin-dashboard');
      const namespaceBytes = new TextEncoder().encode(ADMIN_NAMESPACE);
      const headsBytes = db.getHeads();

      const size = 1 + 4 + clientIdBytes.length + 4 + namespaceBytes.length + 4 + headsBytes.length;
      const buffer = new Uint8Array(size);
      let offset = 0;

      buffer[offset++] = 0x01; // MSG_CONNECT
      writeUint32(buffer, offset, clientIdBytes.length);
      offset += 4;
      buffer.set(clientIdBytes, offset);
      offset += clientIdBytes.length;
      writeUint32(buffer, offset, namespaceBytes.length);
      offset += 4;
      buffer.set(namespaceBytes, offset);
      offset += namespaceBytes.length;
      writeUint32(buffer, offset, headsBytes.length);
      offset += 4;
      buffer.set(headsBytes, offset);

      ws.send(buffer);
    }

    function broadcastCRDTState() {
      const allChanges = db.getChanges();
      if (allChanges.length === 0) return;

      const namespaceBytes = new TextEncoder().encode(ADMIN_NAMESPACE);

      let totalSize = 1 + 4 + namespaceBytes.length + 4;
      for (const change of allChanges) {
        totalSize += 4 + change.length;
      }

      const buffer = new Uint8Array(totalSize);
      let offset = 0;

      buffer[offset++] = 0x03; // MSG_PUSH
      writeUint32(buffer, offset, namespaceBytes.length);
      offset += 4;
      buffer.set(namespaceBytes, offset);
      offset += namespaceBytes.length;
      writeUint32(buffer, offset, allChanges.length);
      offset += 4;

      for (const change of allChanges) {
        writeUint32(buffer, offset, change.length);
        offset += 4;
        buffer.set(change, offset);
        offset += change.length;
      }

      ws.send(buffer);
    }

    function handleServerMessage(buffer) {
      const msgType = buffer[0];

      if (msgType === 0x02) { // MSG_SYNC
        handleSync(buffer);
      } else if (msgType === 0x04) { // MSG_BROADCAST
        handleBroadcast(buffer);
      }
    }

    function handleSync(buffer) {
      let offset = 1;
      const headsLen = readUint32(buffer, offset);
      offset += 4 + headsLen;
      applyCRDTChanges(buffer, offset);
    }

    function handleBroadcast(buffer) {
      let offset = 1;
      const clientIdLen = readUint32(buffer, offset);
      offset += 4 + clientIdLen;
      applyCRDTChanges(buffer, offset);
    }

    function applyCRDTChanges(buffer, offset) {
      const changesCount = readUint32(buffer, offset);
      offset += 4;

      if (changesCount === 0) return;

      const allChanges = [];
      for (let i = 0; i < changesCount; i++) {
        const changeLen = readUint32(buffer, offset);
        offset += 4;
        const changeBytes = buffer.slice(offset, offset + changeLen);
        offset += changeLen;
        allChanges.push(changeBytes);
      }

      try {
        db.applyChanges(allChanges);
        console.log(`‚úÖ Merged ${allChanges.length} admin data changes`);

        // Manually trigger check after changes applied
        db.checkObservers();

        // Force UI update
        updateStats();
        updateNamespaces();
        updateConnections();
        updateActivity();
      } catch (e) {
        console.error('‚ùå Failed to apply admin data changes:', e);
      }
    }

    function setupObservers() {
      // Observe stats
      db.data.stats.$observe(() => {
        updateStats();
      });

      // Observe namespaces
      db.data.namespaces.$observe(() => {
        updateNamespaces();
      });

      // Observe connections
      db.data.connections.$observe(() => {
        updateConnections();
      });

      // Observe activity
      db.data.activity.$observe(() => {
        updateActivity();
      });

      // Initial render
      updateStats();
      updateNamespaces();
      updateConnections();
      updateActivity();
    }

    function updateStats() {
      try {
        // Debug: Check what's actually in the database
        console.log('updateStats called');
        console.log('Raw db.data:', db.data);
        console.log('Raw db.data.stats:', db.data.stats);

        const stats = db.data.stats;
        const activeConnections = stats.active_connections.$value || 0;
        const namespaceCount = stats.namespace_count.$value || 0;
        const totalChanges = stats.total_changes.$value || 0;
        const uptimeSeconds = stats.uptime_seconds.$value || 0;

        console.log('Parsed values:', {
          activeConnections,
          namespaceCount,
          totalChanges,
          uptimeSeconds
        });

        document.getElementById('active-connections').textContent = activeConnections;
        document.getElementById('namespace-count').textContent = namespaceCount;
        document.getElementById('total-changes').textContent = totalChanges.toLocaleString();
        document.getElementById('uptime').textContent = formatUptime(uptimeSeconds);
      } catch (e) {
        console.error('Error in updateStats:', e);
      }
    }

    function updateNamespaces() {
      try {
        const namespaces = db.data.namespaces.$value;
        if (!namespaces) return;

        const nsArray = typeof namespaces === 'string' ? JSON.parse(namespaces) : namespaces;
        const tbody = document.getElementById('namespaces-tbody');

        if (!Array.isArray(nsArray) || nsArray.length === 0) {
          tbody.innerHTML = `
            <tr>
              <td colspan="5" class="empty-state">
                <div class="empty-state-icon">üóÇÔ∏è</div>
                <div>No active namespaces</div>
              </td>
            </tr>
          `;
          return;
        }

        tbody.innerHTML = nsArray.slice(0, 5).map(ns => `
          <tr>
            <td><span class="code">${ns.id}</span></td>
            <td>${ns.connection_count || 0}</td>
            <td>${(ns.change_count || 0).toLocaleString()}</td>
            <td>${formatRelativeTime(ns.last_activity)}</td>
            <td>
              <a href="/data?namespace=${encodeURIComponent(ns.id)}" class="btn btn-sm">View</a>
            </td>
          </tr>
        `).join('');
      } catch (e) {
        console.error('Error updating namespaces:', e);
      }
    }

    function updateConnections() {
      try {
        const connections = db.data.connections.$value;
        if (!connections) return;

        const connArray = typeof connections === 'string' ? JSON.parse(connections) : connections;
        const tbody = document.getElementById('connections-tbody');

        if (!Array.isArray(connArray) || connArray.length === 0) {
          tbody.innerHTML = `
            <tr>
              <td colspan="5" class="empty-state">
                <div class="empty-state-icon">üîå</div>
                <div>No active connections</div>
              </td>
            </tr>
          `;
          return;
        }

        tbody.innerHTML = connArray.slice(0, 10).map(conn => `
          <tr>
            <td><span class="code">${conn.client_id}</span></td>
            <td><span class="code">${conn.namespace_id}</span></td>
            <td><span class="badge badge-info">${conn.transport || 'WebSocket'}</span></td>
            <td>${formatRelativeTime(conn.connected_at)}</td>
            <td>${formatRelativeTime(conn.last_seen)}</td>
          </tr>
        `).join('');
      } catch (e) {
        console.error('Error updating connections:', e);
      }
    }

    function updateActivity() {
      try {
        const activity = db.data.activity.$value;
        if (!activity) return;

        const actArray = typeof activity === 'string' ? JSON.parse(activity) : activity;
        const tbody = document.getElementById('activity-tbody');

        if (!Array.isArray(actArray) || actArray.length === 0) {
          tbody.innerHTML = `
            <tr>
              <td colspan="5" class="empty-state">
                <div class="empty-state-icon">üìù</div>
                <div>No recent activity</div>
              </td>
            </tr>
          `;
          return;
        }

        tbody.innerHTML = actArray.slice(0, 15).map(act => {
          let eventName = act.type || 'unknown';
          let details = '';

          if (act.type === 'client_connected') {
            details = act.transport || 'WebSocket';
          } else if (act.type === 'changes_applied') {
            details = `${act.change_count} changes`;
          }

          return `
            <tr>
              <td>${new Date(act.timestamp).toLocaleTimeString()}</td>
              <td><span class="badge badge-info">${eventName}</span></td>
              <td><span class="code">${act.client_id || act.from_client_id || 'N/A'}</span></td>
              <td><span class="code">${act.namespace_id || 'N/A'}</span></td>
              <td>${details}</td>
            </tr>
          `;
        }).join('');
      } catch (e) {
        console.error('Error updating activity:', e);
      }
    }

    // Binary helpers
    function readUint32(buffer, offset) {
      return (buffer[offset] << 24) |
             (buffer[offset + 1] << 16) |
             (buffer[offset + 2] << 8) |
             buffer[offset + 3];
    }

    function writeUint32(buffer, offset, value) {
      buffer[offset] = (value >>> 24) & 0xFF;
      buffer[offset + 1] = (value >>> 16) & 0xFF;
      buffer[offset + 2] = (value >>> 8) & 0xFF;
      buffer[offset + 3] = value & 0xFF;
    }

    // Initialize
    init();
  </script>
</body>
</html>
