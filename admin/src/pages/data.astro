---
// Data browser page - Query and modify namespace data
---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Data Browser - SwirlDB Admin</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
  <style is:global>
    .material-icons {
      font-family: 'Material Icons';
      font-weight: normal;
      font-style: normal;
      font-size: 20px;
      display: inline-block;
      line-height: 1;
      text-transform: none;
      letter-spacing: normal;
      word-wrap: normal;
      white-space: nowrap;
      direction: ltr;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :root {
      --bg-primary: #0a0e1a;
      --bg-secondary: #13172b;
      --bg-card: #1a1f3a;
      --text-primary: #f1f5f9;
      --text-secondary: #cbd5e1;
      --text-muted: #94a3b8;
      --accent: #8b5cf6;
      --accent-hover: #7c3aed;
      --success: #10b981;
      --warning: #f59e0b;
      --danger: #ef4444;
      --border: #2d3355;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Inter', sans-serif;
      background: var(--bg-primary);
      color: var(--text-primary);
      min-height: 100vh;
    }

    .app-container {
      display: flex;
      min-height: 100vh;
    }

    /* Sidebar */
    .sidebar {
      width: 260px;
      background: var(--bg-secondary);
      border-right: 1px solid var(--border);
      display: flex;
      flex-direction: column;
    }

    .sidebar-header {
      padding: 1.5rem;
      border-bottom: 1px solid var(--border);
    }

    .sidebar-header h1 {
      font-size: 1.25rem;
      font-weight: 700;
      background: linear-gradient(135deg, #8b5cf6 0%, #6366f1 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .sidebar-header h1 .swirl-icon {
      font-size: 1.75rem;
      background: linear-gradient(135deg, #8b5cf6 0%, #6366f1 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      animation: spin 8s linear infinite;
    }

    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(-360deg); }
    }

    .sidebar-header .subtitle {
      font-size: 0.75rem;
      color: var(--text-muted);
      margin-top: 0.25rem;
    }

    .sync-indicator {
      font-size: 0.75rem;
      color: var(--text-muted);
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .sync-pulse {
      width: 6px;
      height: 6px;
      background: var(--success);
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    .nav-menu {
      flex: 1;
      padding: 1rem;
    }

    .nav-section {
      margin-bottom: 1.5rem;
    }

    .nav-section-title {
      font-size: 0.7rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      color: var(--text-muted);
      margin-bottom: 0.5rem;
      padding: 0 0.75rem;
    }

    .nav-link {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.75rem;
      border-radius: 0.5rem;
      color: var(--text-secondary);
      text-decoration: none;
      transition: all 0.2s;
      font-size: 0.9rem;
      margin-bottom: 0.25rem;
    }

    .nav-link:hover {
      background: var(--bg-card);
      color: var(--text-primary);
    }

    .nav-link.active {
      background: var(--accent);
      color: white;
    }

    .nav-icon {
      width: 20px;
      height: 20px;
    }

    /* Main Content */
    .main-content {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    .top-bar {
      background: var(--bg-secondary);
      border-bottom: 1px solid var(--border);
      padding: 1rem 1.5rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .server-status {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .page-header {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .page-header h1 {
      font-size: 1.5rem;
      font-weight: 700;
    }

    .status-indicator {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 1rem;
      background: var(--bg-card);
      border-radius: 0.5rem;
      font-size: 0.85rem;
    }

    .status-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    .status-dot.online {
      background: var(--success);
    }

    .status-dot.offline {
      background: var(--danger);
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    .content-area {
      flex: 1;
      overflow-y: auto;
      padding: 1.5rem;
      display: grid;
      grid-template-columns: 300px 1fr;
      gap: 1.5rem;
    }

    .section {
      background: var(--bg-secondary);
      border: 1px solid var(--border);
      border-radius: 0.75rem;
      padding: 1.5rem;
      height: fit-content;
    }

    .section-title {
      font-size: 1.1rem;
      font-weight: 600;
      margin-bottom: 1rem;
    }

    .namespace-list {
      list-style: none;
    }

    .namespace-item {
      padding: 0.75rem;
      border-radius: 0.5rem;
      cursor: pointer;
      transition: all 0.2s;
      margin-bottom: 0.5rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .namespace-item:hover {
      background: var(--bg-card);
    }

    .namespace-item.selected {
      background: var(--accent);
      color: white;
    }

    .namespace-name {
      font-family: 'SF Mono', Monaco, Consolas, monospace;
      font-size: 0.85rem;
    }

    .namespace-badge {
      font-size: 0.7rem;
      padding: 0.25rem 0.5rem;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 0.25rem;
    }

    .namespace-item.selected .namespace-badge {
      background: rgba(255, 255, 255, 0.2);
    }

    .namespace-meta {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }

    .namespace-description {
      font-size: 0.7rem;
      color: var(--text-muted);
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    .namespace-item.selected .namespace-description {
      color: rgba(255, 255, 255, 0.8);
    }

    .viewer-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .viewer-title {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .namespace-indicator {
      font-size: 0.75rem;
      padding: 0.25rem 0.75rem;
      background: var(--accent);
      color: white;
      border-radius: 1rem;
      font-family: 'SF Mono', Monaco, Consolas, monospace;
    }

    .loading-indicator {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.85rem;
      color: var(--text-muted);
    }

    .loading-spinner {
      width: 14px;
      height: 14px;
      border: 2px solid var(--border);
      border-top-color: var(--accent);
      border-radius: 50%;
      animation: spin-fast 0.6s linear infinite;
    }

    @keyframes spin-fast {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }

    .connection-status {
      font-size: 0.7rem;
      padding: 0.25rem 0.5rem;
      border-radius: 0.25rem;
      display: inline-flex;
      align-items: center;
      gap: 0.375rem;
    }

    .connection-status.connected {
      background: rgba(16, 185, 129, 0.1);
      color: var(--success);
    }

    .connection-status.connecting {
      background: rgba(245, 158, 11, 0.1);
      color: var(--warning);
    }

    .connection-status-dot {
      width: 6px;
      height: 6px;
      border-radius: 50%;
      background: currentColor;
    }

    .data-viewer {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .viewer-controls {
      display: flex;
      gap: 1rem;
      align-items: center;
    }

    .form-group {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    label {
      font-size: 0.85rem;
      font-weight: 600;
      color: var(--text-muted);
    }

    input, textarea {
      background: var(--bg-card);
      border: 1px solid var(--border);
      color: var(--text-primary);
      padding: 0.75rem;
      border-radius: 0.5rem;
      font-size: 0.9rem;
      font-family: 'SF Mono', Monaco, Consolas, monospace;
    }

    input:focus, textarea:focus {
      outline: none;
      border-color: var(--accent);
    }

    textarea {
      resize: vertical;
      min-height: 100px;
      font-family: 'SF Mono', Monaco, Consolas, monospace;
    }

    .btn {
      padding: 0.75rem 1.5rem;
      background: var(--accent);
      color: white;
      border: none;
      border-radius: 0.5rem;
      font-size: 0.9rem;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s;
      white-space: nowrap;
    }

    .btn:hover {
      background: var(--accent-hover);
    }

    .btn-success {
      background: var(--success);
    }

    .btn-success:hover {
      background: #059669;
    }

    .btn-danger {
      background: var(--danger);
    }

    .btn-danger:hover {
      background: #dc2626;
    }

    .data-display {
      background: var(--bg-card);
      border: 1px solid var(--border);
      border-radius: 0.5rem;
      padding: 1rem;
      font-family: 'SF Mono', Monaco, Consolas, monospace;
      font-size: 0.85rem;
      overflow-x: auto;
      white-space: pre-wrap;
      word-wrap: break-word;
      max-height: 60vh;
      overflow-y: auto;
    }

    .empty-state {
      text-align: center;
      padding: 3rem;
      color: var(--text-muted);
    }

    .empty-state-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
      opacity: 0.5;
    }

    .button-group {
      display: flex;
      gap: 0.75rem;
    }

    .alert {
      padding: 1rem;
      border-radius: 0.5rem;
      margin-bottom: 1rem;
      font-size: 0.9rem;
    }

    .alert-success {
      background: rgba(16, 185, 129, 0.1);
      border: 1px solid var(--success);
      color: var(--success);
    }

    .alert-danger {
      background: rgba(239, 68, 68, 0.1);
      border: 1px solid var(--danger);
      color: var(--danger);
    }

    .alert-info {
      background: rgba(139, 92, 246, 0.1);
      border: 1px solid var(--accent);
      color: var(--accent);
    }

    /* Column Browser */
    #dynamic-columns {
      display: flex;
      flex-shrink: 0;
    }

    .browser-column {
      width: 280px;
      flex-shrink: 0;
      border-right: 1px solid var(--border);
      display: flex;
      flex-direction: column;
      background: var(--bg-card);
    }

    .browser-column-header {
      padding: 0.75rem 1rem;
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      color: var(--text-muted);
      border-bottom: 1px solid var(--border);
      background: var(--bg-secondary);
      min-height: 2.5rem;
      display: flex;
      align-items: center;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    .browser-list {
      list-style: none;
      flex: 1;
      overflow-y: auto;
      margin: 0;
      padding: 0;
    }

    .browser-list-item {
      padding: 0.875rem 1rem;
      padding-left: calc(1rem - 2px);
      cursor: pointer;
      transition: all 0.2s;
      border-bottom: 1px solid rgba(255, 255, 255, 0.04);
      border-left: 2px solid transparent;
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 0.75rem;
      font-size: 0.875rem;
      white-space: nowrap;
      overflow: hidden;
      list-style: none;
    }

    .browser-list-item:hover {
      background: rgba(139, 92, 246, 0.12);
      border-left-color: var(--accent);
    }

    .browser-list-item.selected {
      background: var(--accent);
      color: white;
      border-left-color: white;
    }

    .browser-list-item .item-name {
      flex: 1;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      display: flex;
      align-items: center;
      gap: 0.625rem;
      font-weight: 500;
      letter-spacing: -0.01em;
    }

    .browser-list-item .item-icon {
      font-size: 20px;
      flex-shrink: 0;
      opacity: 0.7;
      color: var(--text-secondary);
      line-height: 1;
      display: flex;
      align-items: center;
    }

    .browser-list-item:hover .item-icon {
      opacity: 0.9;
    }

    .browser-list-item.selected .item-icon {
      opacity: 1;
      color: white;
    }

    .browser-list-item .item-type {
      font-size: 0.6875rem;
      padding: 0.25rem 0.5rem;
      border-radius: 0.375rem;
      font-family: 'SF Mono', Monaco, Consolas, monospace;
      flex-shrink: 0;
      font-weight: 600;
      letter-spacing: 0.02em;
      text-transform: uppercase;
      opacity: 0.85;
    }

    /* Type badge colors */
    .browser-list-item .item-type[data-type="string"] {
      background: rgba(16, 185, 129, 0.15);
      color: #10b981;
    }

    .browser-list-item .item-type[data-type="number"] {
      background: rgba(59, 130, 246, 0.15);
      color: #3b82f6;
    }

    .browser-list-item .item-type[data-type="object"] {
      background: rgba(139, 92, 246, 0.15);
      color: #a78bfa;
    }

    .browser-list-item .item-type[data-type="array"] {
      background: rgba(245, 158, 11, 0.15);
      color: #f59e0b;
    }

    .browser-list-item .item-type[data-type="boolean"] {
      background: rgba(236, 72, 153, 0.15);
      color: #ec4899;
    }

    .browser-list-item.selected .item-type {
      background: rgba(255, 255, 255, 0.25);
      color: white;
      opacity: 1;
    }

    .browser-value-display {
      padding: 1.5rem;
      font-family: 'SF Mono', Monaco, Consolas, monospace;
      font-size: 0.85rem;
      background: var(--bg-card);
      border-left: 1px solid var(--border);
      overflow: auto;
      flex: 1;
      white-space: pre-wrap;
      word-wrap: break-word;
    }

    .value-editor {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .value-editor-input {
      width: 100%;
      padding: 0.75rem;
      background: var(--bg-secondary);
      border: 1px solid var(--border);
      border-radius: 0.375rem;
      color: var(--text);
      font-family: 'SF Mono', Monaco, Consolas, monospace;
      font-size: 0.875rem;
      resize: vertical;
      min-height: 3rem;
    }

    .value-editor-input:focus {
      outline: none;
      border-color: var(--accent);
    }

    .value-editor-actions {
      display: flex;
      gap: 0.5rem;
      align-items: center;
    }

    .btn-save {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 1rem;
      background: var(--accent);
      color: white;
      border: none;
      border-radius: 0.375rem;
      cursor: pointer;
      font-size: 0.875rem;
      font-weight: 500;
      transition: all 0.2s;
    }

    .btn-save:hover {
      background: #7c3aed;
    }

    .btn-save:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .btn-save .material-icons {
      font-size: 18px;
    }
  </style>
</head>
<body>
  <div class="app-container">
    <!-- Sidebar -->
    <nav class="sidebar">
      <div class="sidebar-header">
        <h1><span class="swirl-icon">🌀</span> SwirlDB</h1>
        <div class="subtitle">Administration Console</div>
        <div class="sync-indicator" style="margin-top: 0.75rem;">
          <span class="sync-pulse"></span>
          <span>Real-time sync active</span>
        </div>
      </div>

      <div class="nav-menu">
        <div class="nav-section">
          <div class="nav-section-title">Overview</div>
          <a href="/" class="nav-link">
            <span class="nav-icon">📊</span>
            Dashboard
          </a>
        </div>

        <div class="nav-section">
          <div class="nav-section-title">Data Management</div>
          <a href="/namespaces" class="nav-link">
            <span class="nav-icon">🗂️</span>
            Namespaces
          </a>
          <a href="/data" class="nav-link active">
            <span class="nav-icon">🔍</span>
            Data Browser
          </a>
        </div>

        <div class="nav-section">
          <div class="nav-section-title">Monitoring</div>
          <a href="/connections" class="nav-link">
            <span class="nav-icon">🔌</span>
            Connections
          </a>
          <a href="/activity" class="nav-link">
            <span class="nav-icon">📝</span>
            Activity Log
          </a>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <main class="main-content">
      <div class="top-bar">
        <div class="server-status">
          <div class="page-header">
            <h1>🔍 Data Browser</h1>
          </div>
          <div class="status-indicator">
            <span class="status-dot online" id="status-dot"></span>
            <span id="status-text">Connected</span>
          </div>
          <div class="status-indicator">
            <span>🌐 localhost:3030</span>
          </div>
        </div>
        <div>
          <span id="current-time" style="color: var(--text-muted); font-size: 0.85rem;"></span>
        </div>
      </div>

      <div class="content-area">
        <!-- Column-based Data Browser -->
        <div class="data-viewer" style="grid-column: 1 / -1;">
          <div class="section" style="padding: 0; display: flex; flex-direction: column; height: 75vh;">
            <!-- Header -->
            <div style="padding: 1.5rem; border-bottom: 1px solid var(--border);">
              <div id="alert-container"></div>
              <div class="viewer-header">
                <div class="viewer-title">
                  <h2 class="section-title" style="margin: 0;">🔍 Data Browser</h2>
                  <span id="current-namespace-indicator" style="display: none;" class="namespace-indicator"></span>
                  <span id="connection-status" class="connection-status" style="display: none;">
                    <span class="connection-status-dot"></span>
                    <span id="connection-status-text">Connected</span>
                  </span>
                </div>
                <span id="loading-indicator" class="loading-indicator" style="display: none;">
                  <span class="loading-spinner"></span>
                  <span>Loading...</span>
                </span>
              </div>
              <div style="margin-top: 0.75rem; font-size: 0.85rem; color: var(--text-muted);" id="current-path-display">
                <strong>Path:</strong> <span style="font-family: 'SF Mono', Monaco, Consolas, monospace;" id="current-path">/</span>
              </div>
            </div>

            <!-- Multi-column browser -->
            <div style="flex: 1; display: flex; overflow-x: auto; overflow-y: hidden;">
              <!-- Column 1: Namespaces -->
              <div class="browser-column">
                <div class="browser-column-header">Namespaces</div>
                <ul class="browser-list" id="namespace-list">
                  <li class="browser-list-item" style="padding: 2rem; text-align: center; color: var(--text-muted);">
                    Loading...
                  </li>
                </ul>
              </div>

              <!-- Dynamic columns will be added here -->
              <div id="dynamic-columns"></div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <script type="module">
    console.log('🔵 Script block executing...');
    import { SwirlDB } from '/swirldb.js';
    console.log('🟢 SwirlDB imported:', SwirlDB);

    // State
    let selectedNamespace = null;
    let namespaceDBs = new Map(); // Map<namespaceId, { db, ws }>
    let namespacesData = [];
    let currentPath = []; // Track current browsing path: ['namespace', 'key1', 'key2', ...]
    let adminDB = null;

    // Update current time
    function updateTime() {
      document.getElementById('current-time').textContent =
        new Date().toLocaleString('en-US', {
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
          hour12: false
        });
    }
    updateTime();
    setInterval(updateTime, 1000);

    // Show alert
    window.showAlert = function(message, type = 'info') {
      const container = document.getElementById('alert-container');
      const alert = document.createElement('div');
      alert.className = `alert alert-${type}`;
      alert.textContent = message;
      container.appendChild(alert);

      setTimeout(() => {
        alert.remove();
      }, 5000);
    };

    // Standard component for rendering list items
    function createListItem(options) {
      const { name, type, value, onClick, selected = false } = options;

      // Icon mapping for Material Icons
      const iconMap = {
        'namespace': 'storage',
        'array': 'view_list',
        'object': 'data_object',
        'string': 'text_fields',
        'number': 'tag',
        'boolean': 'check_circle'
      };

      const icon = iconMap[type] || 'code';
      const arraySize = type === 'array' && Array.isArray(value) ? ` [${value.length}]` : '';
      const selectedClass = selected ? 'selected' : '';

      return `
        <li class="browser-list-item ${selectedClass}" ${onClick ? `onclick="${onClick}"` : ''}>
          <div class="item-name">
            <span class="material-icons item-icon">${icon}</span>
            <span>${name}${arraySize}</span>
          </div>
        </li>
      `;
    }

    // Auto-scroll the columns container to the right
    function scrollColumnsToRight() {
      const container = document.querySelector('[style*="overflow-x: auto"]');
      if (container) {
        setTimeout(() => {
          container.scrollLeft = container.scrollWidth;
        }, 50); // Small delay to ensure DOM is updated
      }
    }

    // Initialize
    async function init() {
      console.log('🚀 Starting init...');
      try {
        console.log('📦 Creating admin DB (in-memory)...');
        console.log('   SwirlDB class:', SwirlDB);
        console.log('   SwirlDB.create:', SwirlDB.create);

        // Connect to admin namespace to get list of namespaces
        const promise = SwirlDB.create();
        console.log('   Promise created:', promise);

        adminDB = await promise;
        console.log('✅ Admin DB created:', adminDB);

        // Observe namespaces
        adminDB.data.namespaces.$observe(() => {
          console.log('🔄 Namespaces list updated');
          // Defer the update to avoid recursive borrow issues
          setTimeout(() => updateNamespaceList(), 0);
        });

        // Give localStorage time to load, then render
        setTimeout(() => {
          console.log('📊 Initial render with cached namespaces');
          updateNamespaceList();
        }, 50);

        // Connect to server
        console.log('🔌 Connecting to admin server...');
        await connectToAdminServer(adminDB);
        console.log('✅ Connected to admin server');

      } catch (error) {
        console.error('❌ Initialization failed:', error);
        console.error('Error details:', error.message, error.stack);
        document.getElementById('status-dot').className = 'status-dot offline';
        document.getElementById('status-text').textContent = 'Connection Failed';
      }
    }

    // Connect to admin server
    async function connectToAdminServer(db) {
      return new Promise((resolve, reject) => {
        const ws = new WebSocket('ws://localhost:3030/ws');
        ws.binaryType = 'arraybuffer';

        ws.onopen = () => {
          console.log('✅ Connected to admin namespace');
          document.getElementById('status-dot').className = 'status-dot online';
          document.getElementById('status-text').textContent = 'Connected';

          // Send connect message
          const clientIdBytes = new TextEncoder().encode('admin-data-browser');
          const namespaceBytes = new TextEncoder().encode('__admin');
          const headsBytes = db.getHeads();

          const size = 1 + 4 + clientIdBytes.length + 4 + namespaceBytes.length + 4 + headsBytes.length;
          const buffer = new Uint8Array(size);
          let offset = 0;

          buffer[offset++] = 0x01;
          writeUint32(buffer, offset, clientIdBytes.length);
          offset += 4;
          buffer.set(clientIdBytes, offset);
          offset += clientIdBytes.length;
          writeUint32(buffer, offset, namespaceBytes.length);
          offset += 4;
          buffer.set(namespaceBytes, offset);
          offset += namespaceBytes.length;
          writeUint32(buffer, offset, headsBytes.length);
          offset += 4;
          buffer.set(headsBytes, offset);

          ws.send(buffer);
          resolve();
        };

        ws.onmessage = (event) => {
          const buffer = new Uint8Array(event.data);
          const msgType = buffer[0];

          if (msgType === 0x02 || msgType === 0x04) {
            let offset = 1;
            if (msgType === 0x02) {
              const headsLen = readUint32(buffer, offset);
              offset += 4 + headsLen;
            } else {
              const clientIdLen = readUint32(buffer, offset);
              offset += 4 + clientIdLen;
            }

            const changesCount = readUint32(buffer, offset);
            offset += 4;

            if (changesCount > 0) {
              const allChanges = [];
              for (let i = 0; i < changesCount; i++) {
                const changeLen = readUint32(buffer, offset);
                offset += 4;
                const changeBytes = buffer.slice(offset, offset + changeLen);
                offset += changeLen;
                allChanges.push(changeBytes);
              }

              try {
                db.applyChanges(allChanges);
                db.checkObservers();
              } catch (e) {
                console.error('❌ Failed to apply changes:', e);
              }
            }
          }
        };

        ws.onerror = (error) => {
          console.error('❌ WebSocket error:', error);
          reject(error);
        };
      });
    }

    // Update namespace list (column 1)
    function updateNamespaceList() {
      const list = document.getElementById('namespace-list');

      try {
        const namespaces = adminDB.getPath('namespaces');

        if (!namespaces) {
          list.innerHTML = '<li class="browser-list-item" style="padding: 2rem; text-align: center; color: var(--text-muted); cursor: default;">No namespaces</li>';
          return;
        }

        // Convert to plain array
        let nsArray;
        if (typeof namespaces === 'string') {
          nsArray = JSON.parse(namespaces);
        } else if (Array.isArray(namespaces)) {
          nsArray = namespaces.map(ns => ({
            id: ns.id,
            connection_count: ns.connection_count || 0
          }));
        } else if (typeof namespaces === 'object') {
          nsArray = Object.values(namespaces).map(ns => ({
            id: ns.id,
            connection_count: ns.connection_count || 0
          }));
        } else {
          nsArray = [];
        }

        namespacesData = nsArray;

        if (nsArray.length === 0) {
          list.innerHTML = '<li class="browser-list-item" style="padding: 2rem; text-align: center; color: var(--text-muted); cursor: default;">No namespaces</li>';
          return;
        }

        list.innerHTML = nsArray.map(ns =>
          createListItem({
            name: ns.id,
            type: 'namespace',
            onClick: `selectNamespaceColumn('${ns.id}')`,
            selected: selectedNamespace === ns.id
          })
        ).join('');
      } catch (error) {
        console.error('❌ Error updating namespace list:', error);
        console.error('Error message:', error.message);
        console.error('Error stack:', error.stack);
        // Don't try to read adminDB again here - it causes recursive borrow issues
        list.innerHTML = `<li class="browser-list-item" style="padding: 2rem; text-align: center; color: var(--danger); cursor: default;">Error: ${error.message}</li>`;
      }
    }

    // Select namespace and show its keys (column 2)
    window.selectNamespaceColumn = async function(namespaceId) {
      try {
        console.log('🔍 Selecting namespace:', namespaceId);
        selectedNamespace = namespaceId;
        currentPath = [namespaceId];

        // Update namespace list selection
        updateNamespaceList();

        // Update path display
        updatePathDisplay();

        // Clear any existing dynamic columns
        document.getElementById('dynamic-columns').innerHTML = '';

        // Connect to namespace if not already connected
        if (!namespaceDBs.has(namespaceId)) {
          await connectToNamespace(namespaceId);
        }

        // Get top-level keys and show them in column 2
        showKeysColumn(namespaceId, '');
      } catch (error) {
        console.error('❌ Error selecting namespace:', error);
        showAlert(`Error: ${error.message}`, 'danger');
      }
    };

    // Connect to a namespace
    async function connectToNamespace(namespaceId) {
      console.log('🔌 Connecting to namespace:', namespaceId);

      // Create in-memory DB
      const db = await SwirlDB.create();

      // Connect to server WebSocket
      const ws = new WebSocket('ws://localhost:3030/ws');
      ws.binaryType = 'arraybuffer';

      let initialSyncReceived = false;
      let resolveInitialSync;
      const initialSyncPromise = new Promise(resolve => {
        resolveInitialSync = resolve;
      });

      await new Promise((resolve, reject) => {
        ws.onopen = () => {
          const clientIdBytes = new TextEncoder().encode(`data-browser-${namespaceId}`);
          const namespaceBytes = new TextEncoder().encode(namespaceId);
          const headsBytes = db.getHeads();

          const size = 1 + 4 + clientIdBytes.length + 4 + namespaceBytes.length + 4 + headsBytes.length;
          const buffer = new Uint8Array(size);
          let offset = 0;

          buffer[offset++] = 0x01;
          writeUint32(buffer, offset, clientIdBytes.length);
          offset += 4;
          buffer.set(clientIdBytes, offset);
          offset += clientIdBytes.length;
          writeUint32(buffer, offset, namespaceBytes.length);
          offset += 4;
          buffer.set(namespaceBytes, offset);
          offset += namespaceBytes.length;
          writeUint32(buffer, offset, headsBytes.length);
          offset += 4;
          buffer.set(headsBytes, offset);

          ws.send(buffer);
          console.log('✅ Connected to namespace WebSocket:', namespaceId);
          resolve();
        };

        ws.onerror = (error) => {
          console.error('❌ WebSocket error:', error);
          reject(error);
        };
      });

      // Handle incoming changes
      ws.onmessage = (event) => {
        const buffer = new Uint8Array(event.data);
        const msgType = buffer[0];

        if (msgType === 0x02 || msgType === 0x04) {
          let offset = 1;
          if (msgType === 0x02) {
            const headsLen = readUint32(buffer, offset);
            offset += 4 + headsLen;
          } else {
            const clientIdLen = readUint32(buffer, offset);
            offset += 4 + clientIdLen;
          }

          const changesCount = readUint32(buffer, offset);
          offset += 4;

          if (changesCount > 0) {
            const allChanges = [];
            for (let i = 0; i < changesCount; i++) {
              const changeLen = readUint32(buffer, offset);
              offset += 4;
              const changeBytes = buffer.slice(offset, offset + changeLen);
              offset += changeLen;
              allChanges.push(changeBytes);
            }

            try {
              db.applyChanges(allChanges);
              console.log(`🔄 Applied ${allChanges.length} changes to namespace:`, namespaceId);

              // Mark initial sync as received if this is the first sync message
              if (msgType === 0x02 && !initialSyncReceived) {
                initialSyncReceived = true;
                console.log('✅ Initial sync received for namespace:', namespaceId);
                resolveInitialSync();
              }

              // Refresh current view if this is the selected namespace
              if (selectedNamespace === namespaceId && currentPath.length > 0) {
                setTimeout(() => {
                  const pathInNamespace = currentPath.slice(1).join('.');
                  showKeysColumn(namespaceId, pathInNamespace);
                }, 100);
              }
            } catch (e) {
              console.error('❌ Failed to apply changes:', e);
            }
          } else if (msgType === 0x02 && !initialSyncReceived) {
            // Empty sync response (namespace has no data)
            initialSyncReceived = true;
            console.log('✅ Initial sync received (empty) for namespace:', namespaceId);
            resolveInitialSync();
          }
        }
      };

      namespaceDBs.set(namespaceId, { db, ws });

      // Wait for initial sync before returning
      console.log('⏳ Waiting for initial sync...');
      await initialSyncPromise;
      console.log('✅ Initial sync complete, data ready');

      // Set up automatic upstream sync
      let lastSyncedHeads = db.getHeads();
      let syncDebounceTimeout = null;

      const syncChanges = () => {
        const currentHeads = db.getHeads();

        // Compare heads to detect if we have new local changes
        const headsChanged = lastSyncedHeads.length !== currentHeads.length ||
          !lastSyncedHeads.every((byte, i) => byte === currentHeads[i]);

        if (headsChanged) {
          console.log('🔄 Auto-sync: Local changes detected, pushing to server...');

          const changes = db.getChanges();
          if (changes.length === 0) {
            lastSyncedHeads = currentHeads;
            return;
          }

          // Build MSG_PUSH message
          const encoder = new TextEncoder();
          const namespaceBytes = encoder.encode(namespaceId);

          let totalSize = 1 + 4 + namespaceBytes.length + 4;
          changes.forEach(change => {
            totalSize += 4 + change.length;
          });

          const buffer = new Uint8Array(totalSize);
          let offset = 0;

          buffer[offset++] = 0x03; // MSG_PUSH

          // Namespace ID
          new DataView(buffer.buffer).setUint32(offset, namespaceBytes.length, false);
          offset += 4;
          buffer.set(namespaceBytes, offset);
          offset += namespaceBytes.length;

          // Changes count
          new DataView(buffer.buffer).setUint32(offset, changes.length, false);
          offset += 4;

          // Changes
          changes.forEach(change => {
            new DataView(buffer.buffer).setUint32(offset, change.length, false);
            offset += 4;
            buffer.set(change, offset);
            offset += change.length;
          });

          ws.send(buffer);
          lastSyncedHeads = currentHeads;
          console.log('✅ Auto-sync: Pushed', changes.length, 'changes to server');
        }
      };

      const debouncedSync = () => {
        if (syncDebounceTimeout) {
          clearTimeout(syncDebounceTimeout);
        }
        syncDebounceTimeout = setTimeout(syncChanges, 300); // 300ms debounce
      };

      // Monkey-patch setValue to trigger auto-sync
      const originalSetValue = db.wasmDB.setValue.bind(db.wasmDB);
      db.wasmDB.setValue = function(path, value) {
        const result = originalSetValue(path, value);
        debouncedSync();
        return result;
      };

      // Also patch setPath for completeness
      const originalSetPath = db.wasmDB.setPath.bind(db.wasmDB);
      db.wasmDB.setPath = function(path, value) {
        const result = originalSetPath(path, value);
        debouncedSync();
        return result;
      };

      console.log('🔄 Auto-sync enabled for namespace:', namespaceId);
    }

    // Show keys at a given path in a column
    function showKeysColumn(namespaceId, pathInNamespace) {
      const nsData = namespaceDBs.get(namespaceId);
      if (!nsData) {
        console.error('❌ Namespace not connected:', namespaceId);
        return;
      }

      const { db } = nsData;
      const dynamicColumns = document.getElementById('dynamic-columns');

      // Clear subsequent columns (everything after this path)
      const columnIndex = currentPath.length - 1;
      const allColumns = dynamicColumns.querySelectorAll('.browser-column, .browser-value-display');
      for (let i = allColumns.length - 1; i >= columnIndex; i--) {
        allColumns[i].remove();
      }

      // Get data at this path using getValue()
      let data;
      let keys = [];

      try {
        // Use getValue() to get the actual JavaScript value
        if (!pathInNamespace) {
          // Root level - get all root keys
          // Use wasmDB.getRootKeys() if available
          if (typeof db.wasmDB.getRootKeys === 'function') {
            keys = db.wasmDB.getRootKeys();
          } else {
            // Fallback: try to get the whole document and enumerate
            data = {};
            keys = [];
          }
        } else {
          // Nested level - get value at path
          data = db.wasmDB.getValue(pathInNamespace);

          if (data === null || data === undefined) {
            keys = [];
          } else if (Array.isArray(data)) {
            // For arrays, use numeric indices
            keys = Array.from({ length: data.length }, (_, i) => String(i));
          } else if (typeof data === 'object') {
            // For objects, use Object.keys()
            keys = Object.keys(data);
          } else {
            // Primitive value - no keys
            keys = [];
          }
        }
      } catch (error) {
        console.error('❌ Error getting data at path:', pathInNamespace, error);
        console.error('Full error stack:', error.stack);
        showAlert(`Error reading data: ${error.message}`, 'danger');
        return;
      }

      // Get just the current level name for the column header
      const columnHeader = currentPath.length > 0 ? currentPath[currentPath.length - 1] : 'Root';

      // If we have keys at root level, display them
      if (!pathInNamespace && keys.length > 0) {
        const column = document.createElement('div');
        column.className = 'browser-column';
        column.innerHTML = `
          <div class="browser-column-header">${columnHeader}</div>
          <ul class="browser-list">
            ${keys.map(key => {
              const value = db.wasmDB.getValue(key);
              const valueType = Array.isArray(value) ? 'array' : typeof value;

              return createListItem({
                name: key,
                type: valueType,
                value: value,
                onClick: `drillDownColumn('${namespaceId}', '${key}', '${key}')`
              });
            }).join('')}
          </ul>
        `;
        dynamicColumns.appendChild(column);
        scrollColumnsToRight();
        return;
      } else if (!pathInNamespace) {
        // Empty namespace
        const column = document.createElement('div');
        column.className = 'browser-column';
        column.innerHTML = `
          <div class="browser-column-header">${columnHeader}</div>
          <ul class="browser-list">
            <li class="browser-list-item" style="padding: 2rem; text-align: center; color: var(--text-muted); cursor: default;">
              <div>Empty namespace</div>
              <div style="font-size: 0.75rem; margin-top: 0.5rem;">No data stored yet</div>
            </li>
          </ul>
        `;
        dynamicColumns.appendChild(column);
        scrollColumnsToRight();
        return;
      }

      // Check data type
      const dataType = Array.isArray(data) ? 'array' : typeof data;

      console.log(`📂 Data at "${pathInNamespace || 'root'}":`, dataType, data);

      // If it's an object or array, show its keys/indices (keys already populated above)
      if (dataType === 'object' || dataType === 'array') {
        if (keys.length === 0) {
          // Empty object/array
          const column = document.createElement('div');
          column.className = 'browser-column';
          column.innerHTML = `
            <div class="browser-column-header">Keys</div>
            <ul class="browser-list">
              <li class="browser-list-item" style="padding: 2rem; text-align: center; color: var(--text-muted); cursor: default;">
                ${dataType === 'array' ? 'Empty array' : 'Empty object'}
              </li>
            </ul>
          `;
          dynamicColumns.appendChild(column);
        scrollColumnsToRight();
          return;
        }

        // Create column with keys
        const column = document.createElement('div');
        column.className = 'browser-column';

        column.innerHTML = `
          <div class="browser-column-header">${columnHeader}</div>
          <ul class="browser-list">
            ${keys.map(key => {
              const fullPath = pathInNamespace ? `${pathInNamespace}.${key}` : key;
              const value = data[key];
              const valueType = Array.isArray(value) ? 'array' : typeof value;

              return createListItem({
                name: key,
                type: valueType,
                value: value,
                onClick: `drillDownColumn('${namespaceId}', '${fullPath}', '${key}')`
              });
            }).join('')}
          </ul>
        `;

        dynamicColumns.appendChild(column);
        scrollColumnsToRight();
      } else {
        // Primitive value - show in an editable column
        const column = document.createElement('div');
        column.className = 'browser-value-display';

        const dataType = typeof data;
        let inputValue = '';
        let inputType = 'text';

        if (data === null) {
          inputValue = 'null';
        } else if (data === undefined) {
          inputValue = 'undefined';
        } else if (dataType === 'string') {
          inputValue = data;
          inputType = 'textarea';
        } else if (dataType === 'number') {
          inputValue = String(data);
          inputType = 'number';
        } else if (dataType === 'boolean') {
          inputValue = String(data);
        } else {
          inputValue = String(data);
        }

        const editorId = `editor-${Date.now()}`;
        const saveBtnId = `save-${Date.now()}`;

        column.innerHTML = `
          <div class="browser-column-header">${columnHeader}</div>
          <div style="padding: 1.5rem;">
            <div style="font-size: 0.75rem; color: var(--text-muted); margin-bottom: 1rem;">Type: ${dataType}</div>
            <div class="value-editor">
              ${inputType === 'textarea'
                ? `<textarea id="${editorId}" class="value-editor-input" rows="4">${inputValue}</textarea>`
                : `<input id="${editorId}" class="value-editor-input" type="${inputType}" value="${inputValue}" />`
              }
              <div class="value-editor-actions">
                <button id="${saveBtnId}" class="btn-save" style="display: none;">
                  <span class="material-icons">check</span>
                  Save
                </button>
                <span id="${saveBtnId}-status" style="font-size: 0.75rem; color: var(--text-muted);"></span>
              </div>
            </div>
          </div>
        `;

        dynamicColumns.appendChild(column);
        scrollColumnsToRight();

        // Setup editing functionality
        const editor = document.getElementById(editorId);
        const saveBtn = document.getElementById(saveBtnId);
        const status = document.getElementById(`${saveBtnId}-status`);
        const originalValue = inputValue;

        editor.addEventListener('input', () => {
          const hasChanged = editor.value !== originalValue;
          saveBtn.style.display = hasChanged ? 'inline-flex' : 'none';
          status.textContent = '';
        });

        saveBtn.addEventListener('click', async () => {
          try {
            console.log('💾 Save clicked', { namespaceId, pathInNamespace, dataType, value: editor.value });
            saveBtn.disabled = true;
            status.textContent = 'Saving...';

            // Get the namespace DB
            const nsData = namespaceDBs.get(namespaceId);
            if (!nsData) {
              throw new Error('Namespace not connected');
            }

            // Convert value to correct type
            let newValue = editor.value;
            if (dataType === 'number') {
              newValue = parseFloat(newValue);
            } else if (dataType === 'boolean') {
              newValue = newValue === 'true';
            } else if (newValue === 'null') {
              newValue = null;
            } else if (newValue === 'undefined') {
              newValue = undefined;
            }

            console.log('💾 Saving to path:', pathInNamespace, 'value:', newValue);

            // Save to DB (auto-sync will handle pushing to server)
            nsData.db.wasmDB.setValue(pathInNamespace, newValue);

            status.textContent = 'Saved! (syncing...)';
            status.style.color = 'var(--success)';
            saveBtn.style.display = 'none';

            setTimeout(() => {
              status.textContent = '';
            }, 2000);
          } catch (error) {
            console.error('❌ Save error:', error);
            status.textContent = 'Error: ' + error.message;
            status.style.color = 'var(--danger)';
          } finally {
            saveBtn.disabled = false;
          }
        });
      }
    }

    // Drill down into a key
    window.drillDownColumn = function(namespaceId, fullPath, key) {
      console.log('🔽 Drilling down:', fullPath);

      // Update current path
      currentPath = [namespaceId, ...fullPath.split('.')];
      updatePathDisplay();

      // Show next level
      showKeysColumn(namespaceId, fullPath);
    };

    // Update path display
    function updatePathDisplay() {
      const pathDisplay = document.getElementById('current-path');
      pathDisplay.textContent = currentPath.length > 0 ? currentPath.join(' / ') : '/';
    }

    // Utility functions
    function readUint32(buffer, offset) {
      return (buffer[offset] << 24) |
             (buffer[offset + 1] << 16) |
             (buffer[offset + 2] << 8) |
             buffer[offset + 3];
    }

    function writeUint32(buffer, offset, value) {
      buffer[offset] = (value >>> 24) & 0xFF;
      buffer[offset + 1] = (value >>> 16) & 0xFF;
      buffer[offset + 2] = (value >>> 8) & 0xFF;
      buffer[offset + 3] = value & 0xFF;
    }

    init();
  </script>
</body>
</html>
